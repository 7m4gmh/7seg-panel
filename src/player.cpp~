#include "common.h"
#include "led.h"
#include "video.h"
#include "audio.h"

#include <opencv2/opencv.hpp>
#include <iostream>
#include <vector>
#include <chrono>
#include <thread>
#include <unistd.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <SDL2/SDL.h>


int main(int argc, char* argv[]) {
	setup_signal_handlers();

	cv::VideoCapture cap(argv[1], cv::CAP_FFMPEG);
    if (!cap.isOpened()) {
        std::cerr << "動画を開けません" << argv[1] << std::endl;
        return 1;
    }

        while (!g_should_exit) {
        cv::Mat frame;
        if (!cap.read(frame)) break;  // 動画終了で抜ける


    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <video_file>" << std::endl;
        return 1;
    }
    std::string video_path = argv[1];

    // --- I2C open ---
    int i2c_fd = open("/dev/i2c-0", O_RDWR);
    if (i2c_fd < 0) {
        perror("open /dev/i2c-0");
        return 1;
    }

    // --- Open video ---
    cv::VideoCapture cap(video_path);
    if (!cap.isOpened()) {
        std::cerr << "Error opening video file " << video_path << std::endl;
        return 1;
    }

    double fps = cap.get(cv::CAP_PROP_FPS);
    if (fps <= 0) fps = FPS;  // fallback
    int frame_delay = static_cast<int>(1000.0 / fps);

    std::cout << "Video opened: FPS=" << fps << std::endl;

    // --- Init Audio (ただし音声は後で差し込む予定) ---
    if (!audio_init(44100, 2)) {
        std::cerr << "Audio init failed" << std::endl;
    }

    //cv::Mat frame;
    while (cap.read(frame) && !finished) {
        cv::Mat gray, resized, bw;
        cv::cvtColor(frame, gray, cv::COLOR_BGR2GRAY);
        cv::resize(gray, resized, cv::Size(W, H));
        cv::threshold(resized, bw, 128, 255, cv::THRESH_BINARY);

        // --- OpenCV Mat → LED grid ---
        std::vector<uint8_t> grid(TOTAL, 0);
        frame_to_grid(bw, grid);  // （video.cpp に追加すべき関数）

        update_display(i2c_fd, grid, module_addrs);

        std::this_thread::sleep_for(std::chrono::milliseconds(frame_delay));

	      // OpenCVのイベント処理 (これが無いとSIGINTが遅れる場合あり)
        if (cv::waitKey(1) == 'q') {
            break;
	}

    }

	}
	   // Ctrl+C または動画終了または 'q' 押下でここに来る
    cap.release();
    cv::destroyAllWindows();
    SDL_Quit();

    return 0;
}

